basePath: /api/v1
definitions:
  domain.Channel:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_private:
        description: Computed field, not stored in DB
        type: boolean
      name:
        type: string
      project_id:
        type: string
      updated_at:
        type: string
    type: object
  domain.ChannelMember:
    properties:
      channel_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.Message:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
      updated_at:
        type: string
    type: object
  domain.Project:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  domain.ProjectMember:
    properties:
      created_at:
        type: string
      id:
        type: string
      joined_at:
        type: string
      project_id:
        type: string
      role:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.ChannelCreateRequest:
    properties:
      is_private:
        description: If true, creator will be added as member
        type: boolean
      name:
        type: string
      project_id:
        type: string
    required:
    - name
    - project_id
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      name:
        type: string
      username:
        type: string
    required:
    - email
    - name
    type: object
  dto.CreateUserResponse:
    type: object
  dto.Error:
    properties:
      code:
        description: Error code (e.g., "VALIDATION_ERROR", "USER_NOT_FOUND")
        type: string
      details:
        additionalProperties:
          type: string
        description: Additional context (field names, values, etc.)
        type: object
      message:
        description: Human-readable error message
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        description: Error code or type
        type: string
      message:
        description: Human-readable error description
        type: string
    type: object
  dto.ErrorViewModel:
    properties:
      error:
        description: Error code or type
        type: string
      errors:
        description: Detailed validation errors (optional)
        items:
          $ref: '#/definitions/dto.Error'
        type: array
      message:
        description: Human-readable error description
        type: string
      success:
        description: Always false for error responses
        type: boolean
    type: object
  dto.GetUserResponse:
    type: object
  dto.GetUsersResponse:
    type: object
  dto.MessageCreateRequest:
    properties:
      channel_id:
        type: string
      content:
        type: string
      receiver_id:
        type: string
    required:
    - content
    type: object
  dto.UpdateUserRequest:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  dto.UpdateUserResponse:
    type: object
  dto.UserDto:
    properties:
      avatar_url:
        type: string
      clerk_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  handlers.AssignRoleRequest:
    properties:
      resource_id:
        type: string
      resource_type:
        type: string
      role:
        $ref: '#/definitions/models.RoleType'
      user_id:
        type: string
    required:
    - role
    - user_id
    type: object
  handlers.DirectMessageRequest:
    properties:
      content:
        type: string
      recipient_id:
        type: string
    required:
    - content
    - recipient_id
    type: object
  handlers.MessageListResponse:
    properties:
      limit:
        type: integer
      messages:
        items:
          $ref: '#/definitions/domain.Message'
        type: array
      page:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  models.RoleType:
    enum:
    - admin
    - manager
    - user
    - external
    type: string
    x-enum-comments:
      RoleAdmin: Can manage everything
      RoleExternal: Can only participate in public channels
      RoleManager: Can manage everything except users
      RoleUser: Can participate in assigned projects/channels, create 1:1 chats
    x-enum-varnames:
    - RoleAdmin
    - RoleManager
    - RoleUser
    - RoleExternal
  models.UserRole:
    properties:
      created_at:
        type: string
      id:
        type: string
      resource_id:
        description: For project/channel specific roles (not used in simplified system)
        type: string
      resource_type:
        description: '"project", "channel", null for system roles (not used in simplified
          system)'
        type: string
      role:
        $ref: '#/definitions/models.RoleType'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
host: localhost:30000
info:
  contact:
    email: support@thothix.com
    name: API Support
    url: http://www.thothix.com/support
  description: API per la piattaforma di messaggistica aziendale Thothix
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Thothix API
  version: "1.0"
paths:
  /api/v1/auth/import-users:
    post:
      consumes:
      - application/json
      description: Import all users from Clerk to local database (development only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Import all users from Clerk
      tags:
      - auth
  /api/v1/auth/me:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorViewModel'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /api/v1/auth/sync:
    post:
      consumes:
      - application/json
      description: Synchronize user data from Clerk to local database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorViewModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorViewModel'
      security:
      - BearerAuth: []
      summary: Sync user from Clerk
      tags:
      - auth
  /api/v1/auth/webhooks/clerk:
    post:
      consumes:
      - application/json
      description: Handle Clerk webhooks for automatic user synchronization
      parameters:
      - description: Clerk webhook payload
        in: body
        name: webhook
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Handle Clerk webhooks
      tags:
      - auth
  /api/v1/channels:
    get:
      consumes:
      - application/json
      description: Get a list of all channels accessible to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Channel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all channels for user
      tags:
      - channels
    post:
      consumes:
      - application/json
      description: Create a new channel for a project
      parameters:
      - description: Channel data
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/dto.ChannelCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Channel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new channel
      tags:
      - channels
  /api/v1/channels/{id}:
    get:
      consumes:
      - application/json
      description: Get a single channel by its ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Channel'
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get channel by ID
      tags:
      - channels
  /api/v1/channels/{id}/join:
    post:
      consumes:
      - application/json
      description: Join a public channel or accept invite to private channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ChannelMember'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Join a channel
      tags:
      - channels
  /api/v1/channels/{id}/messages:
    get:
      consumes:
      - application/json
      description: Get all messages for a specific channel with pagination
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Messages per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MessageListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get messages for a channel
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Send a message to a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/dto.MessageCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Send a message
      tags:
      - messages
  /api/v1/messages/direct:
    post:
      consumes:
      - application/json
      description: Create a direct message conversation or send a message to existing
        DM
      parameters:
      - description: Direct message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/handlers.DirectMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create/Send direct message
      tags:
      - messages
  /api/v1/projects:
    get:
      consumes:
      - application/json
      description: Get a list of all projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /api/v1/projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get a single project by its ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update a project's information
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /api/v1/projects/{id}/members:
    post:
      consumes:
      - application/json
      description: Add a user as a member to a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProjectMember'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add member to project
      tags:
      - projects
  /api/v1/projects/{id}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove member from project
      tags:
      - projects
  /api/v1/roles:
    post:
      consumes:
      - application/json
      description: Assign a role to a user (system, project, or channel specific)
      parameters:
      - description: Role assignment
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRole'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - roles
  /api/v1/roles/{roleId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific role from a user
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke user role
      tags:
      - roles
  /api/v1/users/{userId}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles assigned to a user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRole'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - roles
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
