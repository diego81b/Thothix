services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      target: dev
    image: thothix/postgres:17.5-thothix1.0-dev
    container_name: thothix-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Vault service with custom configuration for secret management
  vault:
    build:
      context: .
      dockerfile: Dockerfile.vault
      target: dev
    image: thothix/vault:1.15.0-thothix1.0-dev
    container_name: thothix-vault-dev
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-thothix-dev-root-token}
      VAULT_DEV_MODE: ${VAULT_DEV_MODE:-true}
      VAULT_LOG_LEVEL: INFO
    # Comando diretto per evitare problemi di capabilities su Windows/WSL
    command: >
      sh -c "
      if [ \"$$VAULT_DEV_MODE\" = \"true\" ]; then
        vault server -dev -dev-root-token-id=\"$$VAULT_DEV_ROOT_TOKEN_ID\" -dev-listen-address=\"0.0.0.0:8200\"
      else
        vault server -config=/vault/config/vault.hcl
      fi
      "
    ports:
      - '8200:8200'
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_dev_data:/vault/data
      - vault_dev_logs:/vault/logs
      - ./vault/scripts:/scripts:ro
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'sh', '-c', 'VAULT_ADDR=http://127.0.0.1:8200 vault status']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vault-init:
    image: thothix/vault:1.15.0-thothix1.0-dev
    container_name: thothix-vault-init-dev
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-thothix-dev-root-token}
      VAULT_MOUNT: ${VAULT_MOUNT:-thothix}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./vault/scripts:/scripts:ro
    command: ['/bin/sh', '/scripts/init-secrets.sh']
    networks:
      - app-network
    restart: 'no'
  thothix-api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      target: dev
    image: thothix/api:1.0.0-dev
    container_name: thothix-api-dev
    restart: unless-stopped
    ports:
      - '30000:30000'
    environment:
      # Database configuration (from .env or vault)
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-thothix-db}

      # Application configuration
      PORT: ${PORT:-30000}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      GIN_MODE: ${GIN_MODE:-debug}

      # Authentication (from .env or vault)
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET}

      # Application secrets
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Vault configuration (optional - only used if USE_VAULT=true)
      USE_VAULT: ${USE_VAULT:-false}
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_APP_TOKEN}
      VAULT_MOUNT: ${VAULT_MOUNT:-thothix}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  vault_dev_data:
    driver: local
  vault_dev_logs:
    driver: local

networks:
  app-network:
    driver: bridge
