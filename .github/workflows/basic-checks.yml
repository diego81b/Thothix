name: Basic Checks

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  GO_VERSION: '1.24.3'
  NODE_VERSION: '22'

jobs:
  go-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod tidy

      - name: Install swag CLI
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        working-directory: ./backend
        run: swag init

      - name: Verify Go modules
        working-directory: ./backend
        run: go mod verify

      - name: Install Node dependencies
        run: npm install

      - name: Check Vault connectivity
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "üîê Checking Vault connectivity..."
          if [ -z "$VAULT_ADDR" ] || [ -z "$VAULT_TOKEN" ]; then
            echo "‚ùå VAULT_ADDR or VAULT_TOKEN not configured in GitHub Secrets"
            echo "‚ö†Ô∏è  Running tests without Vault integration"
            echo "USE_VAULT=false" >> $GITHUB_ENV
          else
            # Test Vault connection
            curl -H "X-Vault-Token: $VAULT_TOKEN" \
                 -X GET \
                 "$VAULT_ADDR/v1/sys/health" \
                 --fail --silent --show-error || {
              echo "‚ùå Cannot connect to Vault at $VAULT_ADDR"
              echo "‚ö†Ô∏è  Running tests without Vault integration"
              echo "USE_VAULT=false" >> $GITHUB_ENV
              exit 0
            }
            echo "‚úÖ Vault is accessible"
            echo "USE_VAULT=true" >> $GITHUB_ENV
          fi

      - name: Run Go tests (with or without Vault)
        working-directory: ./backend
        env:
          # Vault configuration (se disponibile)
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_MOUNT: thothix

          # Fallback environment variables (se Vault non √® disponibile)
          DB_USER: ${{ secrets.DB_USER || 'postgres' }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD || 'postgres' }}
          DB_NAME: ${{ secrets.DB_NAME || 'thothix_test' }}
          DB_HOST: ${{ secrets.DB_HOST || 'localhost' }}
          DB_PORT: ${{ secrets.DB_PORT || '5432' }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY || 'sk_test_github_actions_key' }}
          CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET || 'whsec_test_github_actions_secret' }}

          # App settings
          ENVIRONMENT: test
        run: |
          echo "üß™ Running Go tests (USE_VAULT=$USE_VAULT)..."
          go test -v ./... -timeout=10m

      - name: Build Go application
        working-directory: ./backend
        run: go build -v ./...

  lint-and-scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm install

      - name: Install Go dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod tidy

      - name: Run lint (Go + formatting checks)
        run: |
          echo "üîç Running comprehensive linting..."
          npm run lint

      - name: Validate package.json scripts
        run: |
          echo "üìã Checking if all script commands are valid..."
          npm run --silent || echo "Some scripts may have issues"
