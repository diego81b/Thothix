name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: thothix_test
  CLERK_SECRET_KEY: sk_test_github_actions_key

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thothix_test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Install swag CLI
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        working-directory: ./backend
        run: swag init

      - name: Run tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: thothix_test
          DB_PORT: 5432
          CLERK_SECRET_KEY: ${{ env.CLERK_SECRET_KEY }}
        run: go test -v ./...

      - name: Build
        working-directory: ./backend
        run: go build -v ./...
  build-docker:
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: thothix/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build database Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.postgres
          push: false
          tags: thothix/postgres:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  lint-and-security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./backend

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        working-directory: ./backend
        run: gosec -no-fail -fmt sarif -out results.sarif ./...
        continue-on-error: true

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: [build-docker, lint-and-security]

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" >> .env
          echo "CLERK_SECRET_KEY=${{ env.CLERK_SECRET_KEY }}" >> .env
          echo "DB_HOST=postgres" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "DB_NAME=${{ env.POSTGRES_DB }}" >> .env
          echo "PORT=30000" >> .env
          echo "ENVIRONMENT=test" >> .env

      - name: Test with docker-compose
        run: |
          docker-compose up -d --build
          echo "Waiting for services to be ready..."
          sleep 45

          echo "Checking service status:"
          docker-compose ps

          echo "Checking API logs:"
          docker-compose logs thothix-api || echo "No API logs available"

          echo "Testing health endpoint with retries:"
          for i in {1..5}; do
            if curl -f http://localhost:30000/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10s..."
              sleep 10
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts, showing logs:"
                docker-compose logs
                exit 1
              fi
            fi
          done

          echo "All tests passed!"
          docker-compose down
