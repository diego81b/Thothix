name: Basic Checks

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  GO_VERSION: '1.24.3'
  NODE_VERSION: '22'

jobs:
  go-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod tidy

      - name: Install swag CLI
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        working-directory: ./backend
        run: swag init

      - name: Verify Go modules
        working-directory: ./backend
        run: go mod verify

      - name: Install Node dependencies
        run: npm install

      - name: Start Vault container
        run: |
          # Create a minimal docker-compose just for Vault in CI
          cat > docker-compose.ci.yml << 'EOF'
          services:
            vault:
              image: hashicorp/vault:1.15
              container_name: thothix-vault-dev
              environment:
                VAULT_DEV_ROOT_TOKEN_ID: thothix-dev-root-token
                VAULT_DEV_MODE: "true"
                VAULT_LOG_LEVEL: INFO
              command: vault server -dev -dev-root-token-id=thothix-dev-root-token -dev-listen-address=0.0.0.0:8200
              ports:
                - '8200:8200'
              cap_add:
                - IPC_LOCK
          EOF
          
          # Start Vault
          docker compose -f docker-compose.ci.yml up -d vault
          
          # Wait for Vault to be ready
          until curl -s http://localhost:8200/v1/sys/health > /dev/null; do
            echo "Waiting for Vault..."
            sleep 2
          done
          echo "âœ… Vault is ready"

      - name: Initialize Vault with secrets
        env:
          VAULT_ADDR: http://localhost:8200
          VAULT_ROOT_TOKEN: thothix-dev-root-token
          # Test environment variables per vault sync
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: thothix_test
          DB_HOST: localhost
          DB_PORT: 5432
          CLERK_SECRET_KEY: sk_test_github_actions_key
          CLERK_WEBHOOK_SECRET: whsec_test_github_actions_secret
          ENVIRONMENT: test
        run: npm run vault:init

      - name: Run Go tests (all tests with Vault)
        working-directory: ./backend
        env:
          # Vault configuration
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: thothix-dev-root-token
          USE_VAULT: true
          VAULT_MOUNT: thothix
          
          # App settings
          ENVIRONMENT: test
        run: go test -v ./... -timeout=10m

      - name: Build Go application
        working-directory: ./backend
        run: go build -v ./...

      - name: Cleanup Vault container
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down -v || true
          rm -f docker-compose.ci.yml || true

  go-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=10m

  scripts-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm install

      - name: Validate package.json scripts
        run: |
          echo "Checking if all script commands are valid..."
          npm run --silent || echo "Some scripts may have issues"

      - name: Check pre-commit command
        run: |
          echo "Testing pre-commit command..."
          timeout 60s npm run pre-commit || echo "Pre-commit check completed or timed out"
