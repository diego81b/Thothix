basePath: /api/v1
definitions:
  handlers.AssignRoleRequest:
    properties:
      resource_id:
        type: string
      resource_type:
        type: string
      role:
        $ref: '#/definitions/models.RoleType'
      user_id:
        type: string
    required:
    - role
    - user_id
    type: object
  handlers.CreateChannelRequest:
    properties:
      is_private:
        description: If true, creator will be added as member
        type: boolean
      name:
        type: string
      project_id:
        type: string
    required:
    - name
    - project_id
    type: object
  handlers.DirectMessageRequest:
    properties:
      content:
        type: string
      recipient_id:
        type: string
    required:
    - content
    - recipient_id
    type: object
  handlers.MessageListResponse:
    properties:
      limit:
        type: integer
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      page:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  handlers.SendMessageRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  models.Channel:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_private:
        description: Computed field, not stored in DB
        type: boolean
      members:
        items:
          $ref: '#/definitions/models.User'
        type: array
      name:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: string
      updated_at:
        type: string
    type: object
  models.ChannelMember:
    properties:
      channel:
        $ref: '#/definitions/models.Channel'
      channel_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.Message:
    properties:
      channel:
        $ref: '#/definitions/models.Channel'
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      receiver:
        $ref: '#/definitions/models.User'
      receiver_id:
        type: string
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Project:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.ProjectMember:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      joined_at:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: string
      role:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.RoleType:
    enum:
    - admin
    - manager
    - user
    - external
    type: string
    x-enum-comments:
      RoleAdmin: Can manage everything
      RoleExternal: Can only participate in public channels
      RoleManager: Can manage everything except users
      RoleUser: Can participate in assigned projects/channels, create 1:1 chats
    x-enum-varnames:
    - RoleAdmin
    - RoleManager
    - RoleUser
    - RoleExternal
  models.User:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      system_role:
        allOf:
        - $ref: '#/definitions/models.RoleType'
        description: Default system role
      updated_at:
        type: string
    type: object
  models.UserResponse:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      system_role:
        $ref: '#/definitions/models.RoleType'
      updated_at:
        type: string
    type: object
  models.UserRole:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      resource_id:
        description: For project/channel specific roles (not used in simplified system)
        type: string
      resource_type:
        description: '"project", "channel", null for system roles (not used in simplified
          system)'
        type: string
      role:
        $ref: '#/definitions/models.RoleType'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
host: localhost:30000
info:
  contact:
    email: support@thothix.com
    name: API Support
    url: http://www.thothix.com/support
  description: API per la piattaforma di messaggistica aziendale Thothix
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Thothix API
  version: "1.0"
paths:
  /api/v1/auth/me:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /api/v1/auth/sync:
    post:
      consumes:
      - application/json
      description: Synchronize user data from Clerk to local database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Sync user from Clerk
      tags:
      - auth
  /api/v1/channels:
    get:
      consumes:
      - application/json
      description: Get a list of all channels accessible to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Channel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all channels for user
      tags:
      - channels
    post:
      consumes:
      - application/json
      description: Create a new channel for a project
      parameters:
      - description: Channel data
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateChannelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Channel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new channel
      tags:
      - channels
  /api/v1/channels/{id}:
    get:
      consumes:
      - application/json
      description: Get a single channel by its ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Channel'
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get channel by ID
      tags:
      - channels
  /api/v1/channels/{id}/join:
    post:
      consumes:
      - application/json
      description: Join a public channel or accept invite to private channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ChannelMember'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Join a channel
      tags:
      - channels
  /api/v1/channels/{id}/messages:
    get:
      consumes:
      - application/json
      description: Get all messages for a specific channel with pagination
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Messages per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MessageListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get messages for a channel
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Send a message to a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/handlers.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Send a message
      tags:
      - messages
  /api/v1/messages/direct:
    post:
      consumes:
      - application/json
      description: Create a direct message conversation or send a message to existing
        DM
      parameters:
      - description: Direct message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/handlers.DirectMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create/Send direct message
      tags:
      - messages
  /api/v1/projects:
    get:
      consumes:
      - application/json
      description: Get a list of all projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /api/v1/projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get a single project by its ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update a project's information
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /api/v1/projects/{id}/members:
    post:
      consumes:
      - application/json
      description: Add a user as a member to a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectMember'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add member to project
      tags:
      - projects
  /api/v1/projects/{id}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove member from project
      tags:
      - projects
  /api/v1/roles:
    post:
      consumes:
      - application/json
      description: Assign a role to a user (system, project, or channel specific)
      parameters:
      - description: Role assignment
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRole'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - roles
  /api/v1/roles/{roleId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific role from a user
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke user role
      tags:
      - roles
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserResponse'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /api/v1/users/{userId}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles assigned to a user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRole'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - roles
  /api/v1/users/me:
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update current user
      tags:
      - users
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
