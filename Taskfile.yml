version: '3'

# Thothix Cross-Platform Task Runner
# Install: https://taskfile.dev/installation/
# Usage: task <task-name>

vars:
  BACKEND_DIR: backend
  DB_CONTAINER: postgres
  DB_NAME: thothix-db

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # === Development Tasks ===
  format:
    desc: Format Go code
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "📝 Formatting Go code..."
      - gofmt -w .
      - echo "✅ Formatting completed"

  lint:
    desc: Run golangci-lint
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🔍 Running golangci-lint..."
      - golangci-lint run --timeout=3m
      - echo "✅ Linting completed"

  test:
    desc: Run tests
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🧪 Running tests..."
      - go test ./...
      - echo "✅ Tests completed"

  pre-commit:
    desc: Run pre-commit checks (format + add + lint + test)
    deps: [format]
    cmds:
      - echo "📋 Adding formatted files to git..."
      - git add {{.BACKEND_DIR}}/
      - task: lint
      - task: test
      - echo "✅ Pre-commit checks completed"

  build:
    desc: Build the application
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "🔨 Building application..."
      - go build -o ../bin/thothix-backend ./...
      - echo "✅ Build completed"

  # === Docker Environment Management ===
  dev:
    desc: Start development environment
    cmds:
      - echo "🚀 Starting development environment..."
      - docker compose up -d --build
      - echo "✅ Development environment started"

  dev-down:
    desc: Stop development environment
    cmds:
      - echo "🛑 Stopping development environment..."
      - docker compose down
      - echo "✅ Development environment stopped"

  staging:
    desc: Start staging environment
    cmds:
      - echo "🚀 Starting staging environment..."
      - docker compose -f docker-compose.yml -f docker-compose.staging.yml --env-file=.env.staging up -d --build
      - echo "✅ Staging environment started"

  prod:
    desc: Start production environment
    cmds:
      - echo "🚀 Starting production environment..."
      - docker compose -f docker-compose.yml -f docker-compose.prod.yml --env-file=.env.prod up -d --build
      - echo "✅ Production environment started"

  logs:
    desc: Show logs for development environment
    cmds:
      - docker compose logs -f {{.CLI_ARGS}}

  status:
    desc: Show container status
    cmds:
      - echo "📊 Container status:"
      - docker compose ps
      - echo ""
      - echo "🔍 Resource usage:"
      - docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

  # === Database Tasks ===
  db-status:
    desc: Check database status
    cmds:
      - echo "🔍 Database container status:"
      - docker compose ps {{.DB_CONTAINER}}
      - echo ""
      - echo "🔍 Database connection test:"
      - docker compose exec {{.DB_CONTAINER}} pg_isready -U postgres -d {{.DB_NAME}}

  db-connect:
    desc: Connect to database interactively
    cmds:
      - echo "🔗 Connecting to PostgreSQL database..."
      - docker compose exec {{.DB_CONTAINER}} psql -U postgres -d {{.DB_NAME}}

  db-tables:
    desc: List all database tables
    cmds:
      - echo "📋 Listing all tables in database:"
      - docker compose exec {{.DB_CONTAINER}} psql -U postgres -d {{.DB_NAME}} -c "\\d"

  db-check-basemodel:
    desc: Verify BaseModel columns in all tables
    cmds:
      - echo "🔍 Checking BaseModel columns alignment (should be 5 for all tables):"
      - docker compose exec {{.DB_CONTAINER}} psql -U postgres -d {{.DB_NAME}} -c "SELECT table_name, COUNT(*) as basemodel_columns FROM information_schema.columns WHERE table_schema = 'public' AND column_name IN ('id', 'created_by', 'created_at', 'updated_by', 'updated_at') GROUP BY table_name ORDER BY table_name;"

  db-table:
    desc: "Show structure of specific table"
    cmds:
      - echo "🔍 Checking table structure for: {{.CLI_ARGS}}"
      - docker compose exec {{.DB_CONTAINER}} psql -U postgres -d {{.DB_NAME}} -c "\\d {{.CLI_ARGS}}"

  # === Vault Tasks ===
  vault-init:
    desc: Initialize Vault
    cmds:
      - echo "🔐 Initializing Vault..."
      - docker compose exec vault vault operator init

  vault-status:
    desc: Check Vault status
    cmds:
      - echo "🔍 Vault status:"
      - docker compose exec vault vault status

  vault-ui:
    desc: Show Vault UI URL
    cmds:
      - echo "🌐 Vault UI available at http://localhost:8200/ui"

  # === Utility Tasks ===
  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - echo "🧹 Cleaning build artifacts..."
      - rm -rf bin/
      - rm -rf {{.BACKEND_DIR}}/tmp/
      - rm -rf logs/*.log
      - echo "✅ Cleanup completed"

  install-tools:
    desc: Install required Go tools
    cmds:
      - echo "📦 Installing Go tools..."
      - go install mvdan.cc/gofumpt@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - echo "✅ Tools installed"

  help:
    desc: Show detailed help
    cmds:
      - echo "🚀 Thothix Task Runner Help"
      - echo ""
      - echo "📖 Quick Start:"
      - echo "  task dev          # Start development environment"
      - echo "  task pre-commit   # Run pre-commit checks"
      - echo "  task db-status    # Check database"
      - echo ""
      - echo "📋 All available tasks:"
      - task --list
